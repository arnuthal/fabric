{"name":"CSDataTransformationGold","ppdf:dataflowId":"887062d5-a68c-4a86-8554-bab31db902ce","ppdf:owner":{"tenantId":"23144859-5075-4c2a-ad61-c1686fbdb244","userId":"a61a0cb0-f416-4519-b64a-20745260eb99"},"ppdf:fastCopy":false,"version":"1.0","culture":"en-IN","modifiedTime":"2024-08-01T03:03:08.8452302+00:00","ppdf:outputFileFormat":"Parquet","pbi:mashup":{"fastCombine":false,"allowNativeQueries":true,"queriesMetadata":{"Sales":{"queryId":"9c96680e-b307-4262-84e3-865e4bddf1a2","queryName":"Sales"},"Region":{"queryId":"eb0faacb-4e30-4b92-a8aa-83ba724e7515","queryName":"Region"},"Item":{"queryId":"829c4feb-43c2-4c47-8318-a742f6f36455","queryName":"Item"},"SQLServerHostName":{"queryId":"51119746-5e99-4483-9922-d776440c36dc","queryName":"SQLServerHostName"},"SQLServerDatabaseName":{"queryId":"3125d17c-51f9-403e-8203-b82e1b698969","queryName":"SQLServerDatabaseName"},"Sales_DataDestination":{"queryId":"9af15dbf-0900-4d39-a88d-0a052533ec48","queryName":"Sales_DataDestination"},"Sales_WriteToDataDestination":{"queryId":"d1bff0c4-d34a-4ea7-aaf4-9e6dad828b3a","queryName":"Sales_WriteToDataDestination"},"Sales_TransformForWriteToDataDestination":{"queryId":"e032dd0d-2369-4049-b015-65d35e34820a","queryName":"Sales_TransformForWriteToDataDestination"},"Region_DataDestination":{"queryId":"e948005d-26aa-4d5a-acd3-bd199cb9a111","queryName":"Region_DataDestination"},"Region_WriteToDataDestination":{"queryId":"431834b1-f4c4-4385-ac88-01ae318e4bd3","queryName":"Region_WriteToDataDestination"},"Region_TransformForWriteToDataDestination":{"queryId":"5a70a629-3e52-404f-bc12-051d5f345a5b","queryName":"Region_TransformForWriteToDataDestination"},"Item_DataDestination":{"queryId":"31cc343c-c9e1-43c5-845c-ad0bc7bf9d56","queryName":"Item_DataDestination"},"Item_WriteToDataDestination":{"queryId":"b8982adc-d7f5-4b87-9984-3c04bf6fa4c2","queryName":"Item_WriteToDataDestination"},"Item_TransformForWriteToDataDestination":{"queryId":"d10d6644-3a1e-4ff0-aacd-f0dd81107ef4","queryName":"Item_TransformForWriteToDataDestination"}},"document":"section Section1;\r\nshared Sales = let\n  Source = Sql.Database(SQLServerHostName,SQLServerDatabaseName,[Query=\"Select * from staging_sales where CONVERT(DATE, [Order_Date], 101) > (Select max([Order_Date]) from Sales)\"]),\n  #\"Changed column type\" = Table.TransformColumnTypes(Source, {{\"Order_Date\", type date}, {\"Ship_Date\", type date}, {\"Units_Sold\", Int64.Type}}, \"en-US\"),\n  #\"Merged queries\" = Table.NestedJoin(#\"Changed column type\", {\"Region\"}, Region, {\"Region\"}, \"RegionID\", JoinKind.LeftOuter),\n  #\"Expanded Region (2)\" = Table.ExpandTableColumn(#\"Merged queries\", \"RegionID\", {\"RegionID\"}, {\"RegionID\"}),\n  #\"Removed columns\" = Table.RemoveColumns(#\"Expanded Region (2)\", {\"Region\", \"Country\"}),\n  #\"Merged queries 1\" = Table.NestedJoin(#\"Removed columns\", {\"Item_Type\"}, Item, {\"Item_Type\"}, \"Item\", JoinKind.LeftOuter),\n  #\"Expanded Item\" = Table.ExpandTableColumn(#\"Merged queries 1\", \"Item\", {\"ItemId\"}, {\"ItemId\"}),\n  #\"Removed columns 1\" = Table.RemoveColumns(#\"Expanded Item\", {\"Item_Type\", \"Unit_Price\", \"Unit_Cost\", \"Total_Cost\", \"Total_Profit\"})\nin\n#\"Removed columns 1\";\r\nshared Region = let\n  Source = Sql.Database(SQLServerHostName,SQLServerDatabaseName,[Query=\"Select distinct Region, Country from staging_sales where CONVERT(DATE, [Order_Date], 101) > (Select max([Order_Date]) from Sales)\"]),\n  ExistingCountriesList = Sql.Database(SQLServerHostName,SQLServerDatabaseName,[Query=\"select [RegionID], [Country] from Region\"]),\n  RemoveExistingRows = Table.SelectRows(Source, each not List.Contains(ExistingCountriesList[Country],[Country])),\n  AddedRegionId = Table.AddIndexColumn(RemoveExistingRows, \"RegionID\", List.Max(ExistingCountriesList[RegionID]) + 1, 1, Int64.Type)\nin\n  AddedRegionId;\r\nshared Item = let\n  Source = Sql.Database(SQLServerHostName,SQLServerDatabaseName,[Query=\"Select distinct Item_Type, Unit_Cost, Unit_Price from staging_sales where CONVERT(DATE, [Order_Date], 101) > (Select max([Order_Date]) from Sales)\"]),\n  ExistingItemsList = Sql.Database(SQLServerHostName,SQLServerDatabaseName,[Query=\"select [ItemId],[Item_Type] from Item\"]),\n  RemoveExistingRows = Table.SelectRows(Source, each not List.Contains(ExistingItemsList[Item_Type],[Item_Type])),\n  AddedItemId = Table.AddIndexColumn(RemoveExistingRows, \"ItemId\", List.Max(ExistingItemsList[ItemId]) + 1, 1, Int64.Type),\n  #\"Changed column type\" = Table.TransformColumnTypes(AddedItemId, {{\"Unit_Cost\", type number}, {\"Unit_Price\", type number}})\nin\n  #\"Changed column type\";\r\nshared SQLServerHostName = let\r\n  SQLServerHostName = \"lfebii3vkavezllbyfug7pnsiq-wsftz6xnxrbehaq7zo5mkdwmaa.datawarehouse.fabric.microsoft.com\" meta [IsParameterQuery = true, IsParameterQueryRequired = false, Type = type text]\r\nin\r\n  SQLServerHostName;\r\nshared SQLServerDatabaseName = let\r\n  SQLServerDatabaseName = \"79d174b9-8865-4c27-b0f5-11adf1f7eab5\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text]\r\nin\r\n  SQLServerDatabaseName;\r\nshared DefaultStaging = let\r\n  DefaultStaging = Pipeline.DefaultModelStorage()\r\nin\r\n  DefaultStaging;\r\nshared Sales_DataDestination = let\r\n  Pattern = Lakehouse.Contents([CreateNavigationProperties = false]),\r\n  Navigation_1 = Pattern{[workspaceId = \"fa3c8bb4-bced-4342-821f-cbbac50ecc00\"]}[Data],\r\n  Navigation_2 = Navigation_1{[lakehouseId = \"16d51786-a77f-442f-9812-158adbc39a5d\"]}[Data],\r\n  TableNavigation = Navigation_2{[Id = \"Sales\", ItemKind = \"Table\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[Sales_Channel = nullable Text.Type, Order_Priority = nullable Text.Type, Order_Date = nullable Date.Type, Order_ID = nullable Text.Type, Ship_Date = nullable Date.Type, Units_Sold = nullable Int64.Type, RegionID = nullable Int64.Type, ItemId = nullable Int64.Type], {}), [DeleteWhenEmpty = false])\r\nin\r\n  Table;\r\n[Staging = \"DefaultStaging\"]\r\nshared Sales_WriteToDataDestination = let\r\n  Sales_WriteToDataDestination = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = Sales_DataDestination], (txn) => {TableAction.InsertRows(txn[Target], Sales_TransformForWriteToDataDestination), Action.DoNothing}))\r\nin\r\n  Sales_WriteToDataDestination;\r\nshared Sales_TransformForWriteToDataDestination = let\r\n    SourceTable = Table.SelectColumns(Sales, {\"Sales_Channel\", \"Order_Priority\", \"Order_Date\", \"Order_ID\", \"Ship_Date\", \"Units_Sold\", \"RegionID\", \"ItemId\"})\r\nin\r\n    SourceTable;\r\nshared Region_DataDestination = let\r\n  Pattern = Lakehouse.Contents([CreateNavigationProperties = false]),\r\n  Navigation_1 = Pattern{[workspaceId = \"fa3c8bb4-bced-4342-821f-cbbac50ecc00\"]}[Data],\r\n  Navigation_2 = Navigation_1{[lakehouseId = \"16d51786-a77f-442f-9812-158adbc39a5d\"]}[Data],\r\n  TableNavigation = Navigation_2{[Id = \"Region\", ItemKind = \"Table\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[Region = nullable Text.Type, Country = nullable Text.Type, RegionID = nullable Int64.Type], {}), [DeleteWhenEmpty = false])\r\nin\r\n  Table;\r\n[Staging = \"DefaultStaging\"]\r\nshared Region_WriteToDataDestination = let\r\n  Region_WriteToDataDestination = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = Region_DataDestination], (txn) => {TableAction.InsertRows(txn[Target], Region_TransformForWriteToDataDestination), Action.DoNothing}))\r\nin\r\n  Region_WriteToDataDestination;\r\nshared Region_TransformForWriteToDataDestination = let\r\n    SourceTable = Table.SelectColumns(Region, {\"Region\", \"Country\", \"RegionID\"})\r\nin\r\n    SourceTable;\r\nshared Item_DataDestination = let\r\n  Pattern = Lakehouse.Contents([CreateNavigationProperties = false]),\r\n  Navigation_1 = Pattern{[workspaceId = \"fa3c8bb4-bced-4342-821f-cbbac50ecc00\"]}[Data],\r\n  Navigation_2 = Navigation_1{[lakehouseId = \"16d51786-a77f-442f-9812-158adbc39a5d\"]}[Data],\r\n  TableNavigation = Navigation_2{[Id = \"Item\", ItemKind = \"Table\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[Item_Type = nullable Text.Type, Unit_Cost = nullable Number.Type, Unit_Price = nullable Number.Type, ItemId = nullable Int64.Type], {}), [DeleteWhenEmpty = false])\r\nin\r\n  Table;\r\n[Staging = \"DefaultStaging\"]\r\nshared Item_WriteToDataDestination = let\r\n  Item_WriteToDataDestination = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = Item_DataDestination], (txn) => {TableAction.InsertRows(txn[Target], Item_TransformForWriteToDataDestination), Action.DoNothing}))\r\nin\r\n  Item_WriteToDataDestination;\r\nshared Item_TransformForWriteToDataDestination = let\r\n    SourceTable = Table.SelectColumns(Item, {\"Item_Type\", \"Unit_Cost\", \"Unit_Price\", \"ItemId\"})\r\nin\r\n    SourceTable;\r\n","connectionOverrides":[{"path":"lfebii3vkavezllbyfug7pnsiq-wsftz6xnxrbehaq7zo5mkdwmaa.datawarehouse.fabric.microsoft.com","kind":"SQL","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"SQL\",\"path\":\"lfebii3vkavezllbyfug7pnsiq-wsftz6xnxrbehaq7zo5mkdwmaa.datawarehouse.fabric.microsoft.com\"}","audience":null},{"path":"Lakehouse","kind":"Lakehouse","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"Lakehouse\",\"path\":\"Lakehouse\"}","audience":null}]}}